import itertools
import pandas as pd
import numpy as np

from typing import List, Dict

import base
import metrics


class DummyGenerator(base.AbstractNewsGenerator):
    def generate(self, title: str) -> str:
        super().generate(title)
        return "hahaha"


class DummyClassifier(base.AbstractNewsClassifier):
    def predict(self, x: np.ndarray) -> np.ndarray:
        return True

    def fit(self, x: np.ndarray, y: np.ndarray):
        return super().fit(x, y)


def _preprocessArticle(article: str) -> np.array:
    """
    Embeds the generated article into a numpy array to make it compatible with classifiers
    """
    return np.zeros(1)  # Placeholder


def evaluateGenerator(
    generator: base.AbstractNewsGenerator,
    classifiers: Dict[str, base.AbstractNewsClassifier],
    testTitles: List[str],
    paramValues: dict | None,
) -> pd.DataFrame:
    """
    Returns a pd.DataFrame with the accuracies of the classifiers
    on the data generated by the generator

    Parameters
    ========
    generator: base.AbstractNewsGenerator - Fake news generator
    clssifiers: classifiers: Dict[str, base.AbstractNewsClassifier] - A dict of classifiers to evaluate the generator with, the key is the name of the classifier
    testTitles: List[str] - A list of titles to pass to the generator
    paramValues: dict | None - A dictionary with possible generation parameters for the generator model. Can be None if generator does not have to be
    evaluated with different generation parameters

    Output
    ========
    A df.DataFrame with the "accuracy" of generation (that is, the percentage of generated articles classified as fake news by each classfier)

    """
    res = {
        colName: [] for colName in [p for p in paramValues] + [c for c in classifiers]
    }  # Params used as indices
    paramsCombinations = [
        {paramName: comb[i] for i, paramName in enumerate(paramValues)}
        for comb in list(itertools.product(*[paramValues[i] for i in paramValues]))
    ]  # Generate all possible generation parameters combinations

    for paramCombination in paramsCombinations:
        for paramName in paramCombination:
            generator.setGenerationParameter(
                paramName=paramName, value=paramCombination[paramName]
            )
            res[paramName].append(paramCombination[paramName])
        fakeNewsCountPerClassifier = {
            classifierName: 0 for classifierName in classifiers
        }
        for testTitle in testTitles:
            article = _preprocessArticle(generator.generate(testTitle))
            for classifierName in classifiers:
                classification = classifiers[classifierName].predict(article)
                if classification:
                    fakeNewsCountPerClassifier[classifierName] += 1
        for classifierName in classifiers:
            res[classifierName].append(
                fakeNewsCountPerClassifier[classifierName] / len(testTitles)
            )
    df = pd.DataFrame(data=res).set_index([p for p in paramValues])
    return df


df = evaluateGenerator(
        DummyGenerator(),
        {"dummy": DummyClassifier(metrics=[]), "dummy2": DummyClassifier(metrics=[])},
        ["a", "b", "c"],
        {"a": [1, 2, 3], "b": [2, 3], "c": [1, 2, 3, 5, 6, 7], "d": [2, 3]},
    )

